@inject IJSRuntime jsr

<section class="flex-col">
    <h2>Maps</h2>
    <Maps Id="map" Latitude="39.0000" Longitude="34.0000" Zoom="3" Width="calc(100vw - 2rem)" Height="500px"
            OnClick="HandleShow" OnMarkerMoved="HandleMarkerMoved" ViewType="MapView.Esri_WorldStreetMap" />        
    <div>
        Showing the clicked co-ordinates: @((MarkupString)coords)
    </div>
    <div class="flex wrap">
        <Button Text="Topomap" OnClick="@(() => Map(MapView.Esri_WorldTopoMap))" />
        <Button Text="Imagery" OnClick="@(() => Map(MapView.Esri_WorldImagery))" />
        <Button Text="Streetmap" OnClick="@(() => Map(MapView.Esri_WorldStreetMap))" />
        <Button Text="Show Marker" OnClick="ShowMarker" />
        <Button Text="Center & Zoom" OnClick="ShowCenterZoomed" />
        <Button Text="Draw Circle" OnClick="DrawCircle" />
        <Button Text="Remove Marker" OnClick="RemoveMarker" />        
    </div>
    <p class="error">@error</p>
</section>

<Geolocation OnLocationReceived="HandleLocation" EnableLocationUpdates OnLocationError="x => error = x" />

@code
{
    private string? coords, error;
    private bool firstLocation = true;
    private MapLocation? lastLocation;    

    private async Task ShowMarker() => await Maps.AddMarker(jsr, 28.644800, 77.216721, 10, "New Delhi, India", true);
    private async Task ShowCenterZoomed() => await Maps.Center(jsr, 28.644800, 77.216721);
    private async Task RemoveMarker() => await Maps.RemoveMarker(jsr, 28.644800, 77.216721);
    private async Task DrawCircle() => await Maps.DrawCircle(jsr, 28.644800, 77.216721, 50000);

    async Task HandleShow(MapLocation mapLocation)
    {
        coords = $"<b>{Math.Round(mapLocation.Latitude,4)}, {Math.Round(mapLocation.Longitude,4)}</b>";
        if (lastLocation is not null)
        {
            var kms = Math.Round(Geolocation.DistanceKilometers(lastLocation, mapLocation), 0);
            var miles = Math.Round(Geolocation.DistanceMiles(lastLocation, mapLocation), 0);
            coords += $" - the distance from your location is <b>~{kms} Kms</b> or <b>~{miles} Miles</b>";
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task Map(MapView view)
    {
        await Maps.RenderMap(jsr, view);        
        await InvokeAsync(StateHasChanged);
    }    

    async Task HandleLocation(MapLocation mapLocation)
    {
        if (mapLocation == lastLocation) return;
        lastLocation = mapLocation;
        if (firstLocation)
        {
            await Task.Delay(500);
            await Maps.AddMarker(jsr, mapLocation.Latitude, mapLocation.Longitude, 4, "Your location", true);
            await Maps.Center(jsr, mapLocation.Latitude, mapLocation.Longitude);
            firstLocation = false;
        }
        else
        {
            await Maps.AddMarker(jsr, mapLocation.Latitude, mapLocation.Longitude, 4, "Your location", true);
        }
    }

    private void HandleMarkerMoved(MapMarkerMovedLocation movedLocation)
    {
        Console.WriteLine(movedLocation);
    }
}